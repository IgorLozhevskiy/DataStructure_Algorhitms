import java.util.Arrays;
import java.util.LinkedList;

public class InsertSort {
// Сортировка ВСТАВКОЙ
    public static void main(String args[]) {
        int[] sortArr = {12, 6, 4, 1, 15, 10};
        System.out.print(Arrays.toString(sortArr));
        System.out.println();
        insertionSort(sortArr);
        System.out.print(Arrays.toString(sortArr));

    }

    public static void insertionSort(int[] sortArr) {
        for (int i = 1; i < sortArr.length; i++) { // цикл по несортированной части массива
            int current = sortArr[i]; // значение по первому попавшемуся индексу несортированного
            int j = i; // индекс первого попавшегося несортированного
            while (j > 0 && sortArr[j - 1] > current)
            // цикл работает до тех пор, пока:
            //индекс 1го несортированного больше первой ячейки
            {
                sortArr[j] = sortArr[j-1];
                j--;
            }
            sortArr[j] = current;
        }
    }

}

/*Объяснение
Предполагается, что первый элемент списка отсортирован. Переходим к следующему элементу, обозначим его i. Если х больше первого, оставляем его на своём месте. Если он меньше, копируем его на вторую позицию, а i устанавливаем в качестве первого элемента.

Переходя к другим элементам несортированного сегмента, перемещаем более крупные элементы в отсортированном сегменте вверх по списку, пока не встретим элемент меньше i или не дойдём до конца списка. В первом случае i помещается на правильную позицию.

Сложность алгоритма: О(n2) для сравнений и перестановок.*/
